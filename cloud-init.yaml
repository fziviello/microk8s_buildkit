#cloud-config
package_update: true
package_upgrade: true

packages:
  - wget
  - tar
  - runc
  - containerd
  - curl
  - net-tools
  - nfs-kernel-server
  - nfs-common

write_files:
  # BuildKit systemd service
  - path: /etc/systemd/system/buildkit.service
    content: |
      [Unit]
      Description=BuildKit
      Documentation=https://github.com/moby/buildkit

      [Service]
      ExecStart=/usr/local/bin/buildkitd --containerd-worker=true --containerd-worker-addr=/var/snap/microk8s/common/run/containerd.sock --root /var/lib/buildkit
      Restart=always
      RestartSec=5
      User=ubuntu
      Group=ubuntu

      [Install]
      WantedBy=multi-user.target

  # Traefik dashboard
  - path: /tmp/traefik-dashboard.yaml
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: traefik-dashboard
        namespace: traefik
      spec:
        ports:
          - name: dashboard
            port: 9000
            targetPort: 9000
        selector:
          app.kubernetes.io/name: traefik

  # Kubernetes dashboard admin user
  - path: /tmp/k8s-dashboard-admin.yaml
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: admin-user
        namespace: kubernetes-dashboard
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: admin-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kubernetes-dashboard

  # OpenTelemetry Collector
  - path: /tmp/otel-collector.yaml
    content: |
      apiVersion: v1
      kind: Namespace
      metadata:
        name: observability
      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: otel-collector-config
        namespace: observability
      data:
        otel-collector-config.yaml: |
          receivers:
            otlp:
              protocols:
                grpc:
                http:
          exporters:
            logging:
              loglevel: debug
            otlp:
              endpoint: tempo.observability:4317
              tls:
                insecure: true
          service:
            pipelines:
              traces:
                receivers: [otlp]
                exporters: [logging, otlp]
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: otel-collector
        namespace: observability
        labels:
          app: otel-collector
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: otel-collector
        template:
          metadata:
            labels:
              app: otel-collector
          spec:
            containers:
              - name: otel-collector
                image: otel/opentelemetry-collector:0.98.0
                args: ["--config=/etc/otel/otel-collector-config.yaml"]
                volumeMounts:
                  - name: otel-config
                    mountPath: /etc/otel
            volumes:
              - name: otel-config
                configMap:
                  name: otel-collector-config
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: otel-collector
        namespace: observability
      spec:
        selector:
          app: otel-collector
        ports:
          - name: otlp-grpc
            port: 4317
            targetPort: 4317
          - name: otlp-http
            port: 4318
            targetPort: 4318

  # NFS StorageClass
  - path: /tmp/microk8s-nfs-sc.yaml
    content: |
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: microk8s-nfs
      provisioner: microk8s.io/nfs
      reclaimPolicy: Delete
      volumeBindingMode: Immediate
      allowVolumeExpansion: true

runcmd:
  - |
    echo "⏱️ Start provisioning: $(date '+%Y-%m-%d %H:%M:%S')"

    # Update system
    sudo apt update && sudo apt upgrade -y

    # Install MicroK8s
    sudo snap install microk8s --classic --channel=1.28

    # Configure user
    sudo usermod -a -G microk8s ubuntu
    sudo mkdir -p /home/ubuntu/.kube
    sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube

    # Wait for MicroK8s to be ready
    echo "⏳ Waiting for MicroK8s to be ready..."
    until sudo microk8s status --wait-ready; do
      sleep 10
    done

    # Enable components
    sudo microk8s enable community
    sudo microk8s enable dns
    sleep 30
    sudo microk8s enable hostpath-storage
    sleep 30
    sudo microk8s enable registry
    sleep 60
    sudo microk8s enable traefik
    sudo microk8s enable observability
    sleep 30

    # Install NFS server
    sudo apt install -y nfs-kernel-server nfs-common
    sudo mkdir -p /var/snap/microk8s/common/nfs
    sudo chown nobody:nogroup /var/snap/microk8s/common/nfs
    sudo chmod 777 /var/snap/microk8s/common/nfs

    # Enable NFS on MicroK8s
    sudo microk8s enable nfs
    sudo microk8s kubectl apply -f /tmp/microk8s-nfs-sc.yaml

    # Download Kubernetes dashboard
    wget -O /tmp/dashboard.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
    sudo microk8s kubectl apply -f /tmp/dashboard.yaml
    sudo microk8s kubectl apply -f /tmp/k8s-dashboard-admin.yaml

    # Apply OpenTelemetry Collector
    sudo microk8s kubectl apply -f /tmp/otel-collector.yaml

    # Install BuildKit
    BUILDKIT_VERSION="v0.12.2"
    wget https://github.com/moby/buildkit/releases/download/${BUILDKIT_VERSION}/buildkit-${BUILDKIT_VERSION}.linux-amd64.tar.gz -P /tmp/
    sudo tar -xzf /tmp/buildkit-${BUILDKIT_VERSION}.linux-amd64.tar.gz -C /usr/local/bin --strip-components=1
    sudo chmod +x /usr/local/bin/buildctl /usr/local/bin/buildkitd
    sudo mkdir -p /var/lib/buildkit
    sudo chown ubuntu:ubuntu /var/lib/buildkit
    sudo chmod 755 /var/lib/buildkit
    sudo systemctl daemon-reload
    sudo systemctl enable buildkit
    sudo systemctl start buildkit
    sudo buildkitd --oci-worker=true --containerd-worker=false --root /var/lib/buildkit &
    sudo buildctl --addr unix:///var/lib/buildkit/buildkitd.sock debug workers

    # Configure kubeconfig
    sudo microk8s kubectl config view --raw > /home/ubuntu/.kube/config
    sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
    sudo chmod 600 /home/ubuntu/.kube/config

    # Add aliases
    echo "alias kubectl='microk8s kubectl'" >> /home/ubuntu/.bashrc
    echo "alias helm='microk8s helm'" >> /home/ubuntu/.bashrc

    # Cleanup
    rm -f /tmp/*.yaml /tmp/*.tar.gz

    echo "🚀 End provisioning: $(date '+%Y-%m-%d %H:%M:%S')"

final_message: "Provisioning completed"